version: '3.7'

x-common:
  environment:
    &x-common-env
    REDPANDA__BOOTSTRAP_SERVERS: redpanda:9092
    REDPANDA__TOPIC_NAME: companies
    REDPANDA__PARTITION_COUNT: 3
    NEO4J__URI: bolt://neo4j:7687
    NEO4J__USER: neo4j
    NEO4J__PASSWORD: password

name: kafka_neo4j_lei
networks:
  kafka_neo4j_lei:
    driver: bridge
volumes:
  redpanda: null
  neo4j: null
services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - kafka_neo4j_lei
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/cfg.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/cfg.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - "8080:8080"
    networks:
      - kafka_neo4j_lei
    depends_on:
      - redpanda
#  connect:
#    image: docker.redpanda.com/redpandadata/connectors:latest
#    hostname: connect
#    container_name: connect
#    networks:
#      - kafka_neo4j_lei
#    # platform: 'linux/amd64'
#    depends_on:
#      - redpanda
#    ports:
#      - "8083:8083"
#    volumes:
#      - ./redpanda/connect-plugins:/opt/kafka/connect-plugins
#    environment:
#      CONNECT_CONFIGURATION: |
#        key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
#        value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
#        group.id=connectors-cluster
#        offset.storage.topic=_internal_connectors_offsets
#        cfg.storage.topic=_internal_connectors_configs
#        status.storage.topic=_internal_connectors_status
#        cfg.storage.replication.factor=-1
#        offset.storage.replication.factor=-1
#        status.storage.replication.factor=-1
#        offset.flush.interval.ms=1000
#        producer.linger.ms=50
#        producer.batch.size=131072
#      CONNECT_BOOTSTRAP_SERVERS: redpanda:9092
#      CONNECT_GC_LOG_ENABLED: "false"
#      CONNECT_HEAP_OPTS: -Xms512M -Xmx512M
#      CONNECT_LOG_LEVEL: info
#      CONNECT_PLUGIN_PATH: "/opt/kafka/connect-plugins"
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    restart: always
    networks:
      - kafka_neo4j_lei
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
        - neo4j:/data
#    volumes:
#      - ${PWD}/ops/neo4j/data:/data
#      - ${PWD}/ops/neo4j/logs:/logs
#      - ${PWD}/ops/neo4j/import:/var/lib/neo4j/import
#      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'

  base:
    build:
      context: ${PWD}
      dockerfile: ${PWD}/ops/base.Dockerfile
    image: gleif_importer:dev
    container_name: base
    restart: no
    networks:
      - kafka_neo4j_lei
#    volumes:
#      - ${PWD}/src/gleif_importer:/app
#      - ${PWD}/data:/data
  web:
    image: gleif_importer:dev
    stop_signal: SIGINT
    restart: always
#    command: ['flask --app app run -p "3000" --debug --reload']
    command: [ 'python3 -m gunicorn app:app --workers=1 --bind=0.0.0.0:3000 --reload --log-level=warn' ]
    container_name: web
    networks:
      - kafka_neo4j_lei
    depends_on:
      - neo4j
      - console
    ports:
      - '3000:3000'
    environment:
      <<: *x-common-env
    volumes:
      - ${PWD}/src/gleif_importer:/app
      - ${PWD}/data:/data
  consumer:
    profiles:
      - consumer
    image: gleif_importer:dev
    stop_signal: SIGINT
    restart: always
    command: [ 'python3 ./consumer.py' ]
    environment:
      <<: *x-common-env
    deploy:
      mode: replicated
      replicas: 4
    networks:
      - kafka_neo4j_lei
#    depends_on:
#      - neo4j
#      - console
#      - web
    volumes:
      - ${PWD}/src/gleif_importer:/app
      - ${PWD}/data:/data

